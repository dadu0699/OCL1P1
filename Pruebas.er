CONJ: letras -> a~f;
CONJ: LETRAS -> A~F;
CONJ: digitos -> 0~9;
EXP1 -> . "#" * | | {letras} {LETRAS} {digitos};
EXP1: "#3C2E2E";//correcto
EXP1: "#520A0A";//correcto
EXP1: "#D88888";//correcto
EXP1: "#41DA90";//correcto
EXP1: "#591224";//correcto
EXP1: "#BEB6B8";//correcto
EXP1: "2#143EA";//incorrecto



CONJ: digito -> 1~9;
CONJ: letra -> a~z;
er1 -> . {letra} *|{letra} |  {digito} "_";
er2 -> . . . *| ."c""d" . "a" "b" "b" "c" +"d";
er1 : "abecedario_cadena1_cadena2";
er1 : "z";
er1 : "1uno"; //error
er2 : "aaaa"; //error
er2 : "bcdddd";
er2 : "bcd";
er2 : "ababcdabcdbc"; //error falta d al final



CONJ: vocales -> a,e,i,o,u;
CONJ: otrasLetras -> m,r,c,l,g,s;
CONJ: abecedario -> a~z;
Expresion1 -> . | "Los " "El " . + | {vocales} {otrasLetras} * | {abecedario} "_";
Expresion1 : "los murcielagos llevan_en_su_nombre_todas_las_vocales."; //error
Expresion1 : "El murcielago es_una_animal_mamifero";
 


CONJ: abecedario -> a~z;
CONJ: conjnum -> 2~6;
Expresion2 -> . +{abecedario}  . {conjnum} ? . ":" +{abecedario};
Expresion2 : "numero5:cinco";
Expresion2 : "numero 2"; //error



CONJ: abecedario -> a~z;
CONJ: conjnum -> 2~6;
Expresion3 -> . . . . . . * | {abecedario} "_" + {conjnum} ">" + {conjnum} "es " | "TRUE" "FALSE" "." ;  //Expresion de COmparacion   
Expresion3 : "la_expresion5>4es TRUE.";
Expresion3 : "95>4 es FALSE."; //error



CONJ: digito -> 0~9;
operaciones -> . +{digito} + . |"+" |"-" |"*" "/" +{digito};
operaciones : "5+13*7+9/10-1"; <! validACION EXItosa del LEXEma !>
operaciones : "5++3*11"; <! error en LA valid4cion del LEXEma !>



CONJ: vocalesmin -> a,e,i,o,u;
CONJ: VOCALESmay -> A,E,I,O,U;
CONJ: minusculas -> a~z;
CONJ: mayusculas -> A~Z;
CONJ: logicos -> &,!,_;
CONJ: relacionales -> <~>;
EXP1 -> . {vocalesmin} * . | ? {VOCALESmay} . {minusculas} {mayusculas} * . | {logicos} " " {relacionales};
EXP1 : "Un compilador es un programa informatico que se encarga de traducir el codigo fuente de cualquier aplicacion que se este desarrollando"; // error
EXP1 : "a >Bueno < C!< c > G ";



CONJ: simbolos -> !~&;
CONJ: minusculas -> a~z;
CONJ: relacionales -> <~>;
CONJ: digitos -> 0~9;
CONJ: operadores -> !,@,#,$,%;
EXP2 -> * | . . . {simbolos} {minusculas} " " "TEXTO" ? . {relacionales} | {digitos} * {operadores};
EXP2 : "";
EXP2 : "TEXTO ! ! @ @ % $";